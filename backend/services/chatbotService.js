const { GoogleGenerativeAI } = require("@google/generative-ai");
const { ChatGoogleGenerativeAI } = require("@langchain/google-genai");
const { PromptTemplate } = require("@langchain/core/prompts");
const { StringOutputParser } = require("@langchain/core/output_parsers");
const { RunnableSequence } = require("@langchain/core/runnables");
const mongoose = require('mongoose');
const Product = require('../models/productModel');
const Brand = require('../models/brandModel');
const Category = require('../models/prodCategoryModel');
const chatMemory = require('./chatMemoryManager');

// Kh·ªüi t·∫°o Gemini API
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

class ChatbotService {
  constructor() {
    this.model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    this.langChainModel = new ChatGoogleGenerativeAI({
      apiKey: process.env.GEMINI_API_KEY,
      modelName: "gemini-2.0-flash",
      maxOutputTokens: 2048,
      safetySettings: [
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    });
    this.productSearchHistory = new Map(); // Cache k·∫øt qu·∫£ t√¨m ki·∫øm
    
    // T·∫°o template cho c√¢u tr·∫£ l·ªùi
    this.answerTemplate = PromptTemplate.fromTemplate(`
B·∫°n l√† KIA - Chuy√™n gia t∆∞ v·∫•n th·ªùi trang chuy√™n nghi·ªáp t·∫°i c·ª≠a h√†ng qu·∫ßn √°o cao c·∫•p. B·∫°n c√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ xu h∆∞·ªõng th·ªùi trang, ch·∫•t li·ªáu v·∫£i, phong c√°ch ƒÉn m·∫∑c, v√† c√°ch ph·ªëi ƒë·ªì. H√£y t∆∞ v·∫•n kh√°ch h√†ng m·ªôt c√°ch NHI·ªÜT T√åNH, TH√ÇN THI·ªÜN nh∆∞ng v·∫´n CHUY√äN NGHI·ªÜP v√† ƒê·∫≤NG C·∫§P.

L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN:
{chat_history}

TH√îNG TIN S·∫¢N PH·∫®M HI·ªÜN C√ì:
{product_context}

C√ÇU H·ªéI HI·ªÜN T·∫†I C·ª¶A KH√ÅCH H√ÄNG: {query}

KI·∫æN TH·ª®C TH·ªúI TRANG C·∫¶N TH·ªÇ HI·ªÜN (n·∫øu ph√π h·ª£p v·ªõi c√¢u h·ªèi):
- Xu h∆∞·ªõng th·ªùi trang hi·ªán t·∫°i (minimalism, streetwear, vintage, v.v.)
- C√°ch ph·ªëi ƒë·ªì theo m√†u s·∫Øc, ki·ªÉu d√°ng, ho√†n c·∫£nh s·ª≠ d·ª•ng
- Ch·∫•t li·ªáu ph√π h·ª£p theo m√πa (cotton, linen, wool, polyester, v.v.)
- Ki·ªÉu d√°ng ph√π h·ª£p v·ªõi t·ª´ng v√≥c d√°ng
- Phong c√°ch ph√π h·ª£p (casual, formal, athleisure, v.v.)
- B·∫£o qu·∫£n qu·∫ßn √°o ƒë√∫ng c√°ch

C√ÅCH TR·∫¢ L·ªúI:
1. Lu√¥n g·ªçi kh√°ch l√† "b·∫°n" ho·∫∑c "anh/ch·ªã", gi·ªØ ng·ªØ ƒëi·ªáu l·ªãch s·ª± nh∆∞ng th√¢n thi·ªán
2. Tr·∫£ l·ªùi NG·∫ÆN G·ªåN (2-3 c√¢u), S√öC T√çCH v√† CH√çNH X√ÅC
3. Tham kh·∫£o L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN ƒë·ªÉ hi·ªÉu r√µ ng·ªØ c·∫£nh v√† nhu c·∫ßu kh√°ch h√†ng
4. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn phong c√°ch/xu h∆∞·ªõng: tr·∫£ l·ªùi v·ªõi ki·∫øn th·ª©c th·ªùi trang
5. N·∫øu c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ: t∆∞ v·∫•n d·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m c√≥ s·∫µn
6. N·∫øu c√¢u h·ªèi chung chung: gi·ªõi thi·ªáu 1-2 s·∫£n ph·∫©m n·ªïi b·∫≠t, gi·∫£i th√≠ch l√Ω do g·ª£i √Ω
7. LU√îN K·∫æT TH√öC v·ªõi c√¢u g·ª£i m·ªü t∆∞ v·∫•n th√™m ho·∫∑c c√¢u h·ªèi gi√∫p kh√°ch h√†ng c·ª• th·ªÉ h√≥a nhu c·∫ßu

Nh·ªØng ƒëi·ªÅu KH√îNG ƒë∆∞·ª£c l√†m:
- KH√îNG n√≥i r·∫±ng "h·ªá th·ªëng g·∫∑p s·ª± c·ªë" ngay c·∫£ khi kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
- KH√îNG tr·∫£ l·ªùi chung chung, m∆° h·ªì, thi·∫øu chuy√™n nghi·ªáp
- KH√îNG b·ªãa th√¥ng tin v·ªÅ s·∫£n ph·∫©m kh√¥ng c√≥ trong d·ªØ li·ªáu
- KH√îNG s·ª≠ d·ª•ng ti·∫øng l√≥ng ho·∫∑c ti·∫øng Anh kh√¥ng c·∫ßn thi·∫øt
- KH√îNG l·∫∑p l·∫°i c√¢u tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥ m·ªôt c√°ch m√°y m√≥c

L∆ØU √ù ƒê·∫∂C BI·ªÜT:
- Tham kh·∫£o L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN ƒë·ªÉ tr√°nh l·∫∑p l·∫°i th√¥ng tin v√† ƒë·∫£m b·∫£o m·∫°ch tr√≤ chuy·ªán li√™n t·ª•c
- N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p, h√£y v·∫´n c·ªë g·∫Øng t∆∞ v·∫•n v·ªÅ phong c√°ch/xu h∆∞·ªõng li√™n quan
- N·∫øu c√¢u h·ªèi qu√° chung nh∆∞ "mua h√†ng ki·ªÉu g√¨", h√£y gi·ªõi thi·ªáu v·ªÅ c√°c phong c√°ch th·ªùi trang ph·ªï bi·∫øn v√† h·ªèi th√™m v·ªÅ s·ªü th√≠ch
- N·∫øu kh√¥ng hi·ªÉu r√µ c√¢u h·ªèi, h√£y nh·∫π nh√†ng ƒë·ªÅ ngh·ªã kh√°ch h√†ng cung c·∫•p th√™m th√¥ng tin c·ª• th·ªÉ

H√£y tr·∫£ l·ªùi v·ªõi s·ª± t·ª± tin v√† chuy√™n nghi·ªáp nh∆∞ m·ªôt chuy√™n gia th·ªùi trang th·ª±c th·ª•!
`);

    // T·∫°o chu·ªói x·ª≠ l√Ω cho LangChain
    this.langChainChain = RunnableSequence.from([
      {
        query: (input) => input.query,
        chat_history: (input) => this.formatChatHistoryForPrompt(input.chat_history),
        product_context: (input) => input.product_context
      },
      this.answerTemplate,
      this.langChainModel,
      new StringOutputParser()
    ]);
  }

  /**
   * T√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a tr√™n c√¢u h·ªèi s·ª≠ d·ª•ng MongoDB Atlas Search
   * @param {string} query - C√¢u h·ªèi c·ªßa kh√°ch h√†ng
   * @returns {Promise<Array>} - Danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p
   */
  async searchProducts(query) {
    try {
      // Ki·ªÉm tra cache
      if (this.productSearchHistory.has(query)) {
        console.log('‚úÖ S·ª≠ d·ª•ng k·∫øt qu·∫£ t·ª´ cache');
        return this.productSearchHistory.get(query);
      }

      console.log(`üîç T√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi query: "${query}"`);

      // T·∫°o pipeline t√¨m ki·∫øm
      const searchPipeline = [
        {
          $search: {
            index: "product_search_index",
            compound: {
              should: [
                {
                  text: {
                    query: query,
                    path: ["title", "description", "color"],
                    score: { boost: { value: 3 } }
                  }
                },
                {
                  range: {
                    path: "quantity",
                    gt: 0,
                    score: { boost: { value: 1 } }
                  }
                }
              ]
            }
          }
        },
        {
          $lookup: {
            from: "brands",
            localField: "brand",
            foreignField: "_id",
            as: "brandDetails"
          }
        },
        {
          $lookup: {
            from: "categories",
            localField: "category",
            foreignField: "_id",
            as: "categoryDetails"
          }
        },
        {
          $addFields: {
            score: { $meta: "searchScore" },
            brandName: { $arrayElemAt: ["$brandDetails.title", 0] },
            categoryName: { $arrayElemAt: ["$categoryDetails.title", 0] }
          }
        },
        {
          $project: {
            _id: 1,
            title: 1,
            slug: 1,
            description: 1,
            price: 1,
            quantity: 1,
            color: 1,
            images: 1,
            score: 1,
            brandName: 1,
            categoryName: 1,
            ratings: 1,
            totalrating: 1,
            coupon: 1,
          }
        },
        { $limit: 10 }
      ];

      const products = await Product.aggregate(searchPipeline);
      
      // L∆∞u v√†o cache
      this.productSearchHistory.set(query, products);
      
      return products;
    } catch (error) {
      console.error("‚ùå L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:", error);
      throw error;
    }
  }

  /**
   * Ti·ªÅn x·ª≠ l√Ω c√¢u h·ªèi ƒë·ªÉ x√°c ƒë·ªãnh √Ω ƒë·ªãnh v√† th√¥ng tin quan tr·ªçng
   * @param {string} query - C√¢u h·ªèi c·ªßa kh√°ch h√†ng
   * @returns {Promise<Object>} - Th√¥ng tin ph√¢n t√≠ch t·ª´ c√¢u h·ªèi
   */
  async preprocessQuery(query) {
    try {
      const prompt = `
      Ph√¢n t√≠ch chi ti·∫øt c√¢u h·ªèi c·ªßa kh√°ch h√†ng t·∫°i c·ª≠a h√†ng th·ªùi trang v√† tr·∫£ v·ªÅ th√¥ng tin d∆∞·ªõi d·∫°ng JSON:
      
      1. √ù ƒë·ªãnh: 
         - t√¨m_s·∫£n_ph·∫©m: T√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ
         - h·ªèi_gi√°: H·ªèi v·ªÅ gi√° c·∫£
         - h·ªèi_size: H·ªèi v·ªÅ k√≠ch th∆∞·ªõc
         - h·ªèi_m√†u: H·ªèi v·ªÅ m√†u s·∫Øc c√≥ s·∫µn
         - t∆∞_v·∫•n_phong_c√°ch: H·ªèi v·ªÅ c√°ch ph·ªëi ƒë·ªì, phong c√°ch th·ªùi trang
         - t∆∞_v·∫•n_ch·∫•t_li·ªáu: H·ªèi v·ªÅ ch·∫•t li·ªáu v·∫£i, b·∫£o qu·∫£n
         - so_s√°nh: So s√°nh gi·ªØa c√°c s·∫£n ph·∫©m
         - ƒë√°nh_gi√°: H·ªèi v·ªÅ ƒë√°nh gi√°, review c·ªßa s·∫£n ph·∫©m
         - kh√°c: C√°c √Ω ƒë·ªãnh kh√°c

      2. Lo·∫°i s·∫£n ph·∫©m: √°o s∆° mi, √°o thun, qu·∫ßn jeans, ƒë·∫ßm, v√°y, blazer, hoodie, cardigan, v.v. (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng r√µ)
      
      3. Thu·ªôc t√≠nh quan t√¢m:
         - m√†u_s·∫Øc: M√†u s·∫Øc c·ª• th·ªÉ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
         - k√≠ch_th∆∞·ªõc: Size ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
         - gi√°_c·∫£: Ph·∫°m vi gi√° ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
         - ch·∫•t_li·ªáu: Lo·∫°i v·∫£i ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
         - m√πa: M√πa ph√π h·ª£p ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
         - phong_c√°ch: Phong c√°ch ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p (casual, formal, streetwear, etc.)
         - gi·ªõi_t√≠nh: Nam/N·ªØ/Unisex ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
         - d·ªãp: D·ªãp s·ª≠ d·ª•ng ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p (ƒëi l√†m, ti·ªác, th·ªÉ thao, v.v.)
      
      4. M·ª©c ƒë·ªô r√µ r√†ng: (1-5)
         1: R·∫•t m∆° h·ªì - c√¢u h·ªèi qu√° chung, kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c nhu c·∫ßu
         5: R·∫•t c·ª• th·ªÉ - bi·∫øt ch√≠nh x√°c kh√°ch h√†ng ƒëang t√¨m ki·∫øm g√¨
      
      C√¢u h·ªèi: "${query}"
      
      Tr·∫£ v·ªÅ duy nh·∫•t JSON, kh√¥ng ch·ª©a vƒÉn b·∫£n kh√°c.
      `;

      const result = await this.model.generateContent(prompt);
      const text = result.response.text();
      
      // X·ª≠ l√Ω k·∫øt qu·∫£ th√†nh JSON
      try {
        const jsonStr = text.replace(/```json/g, '').replace(/```/g, '').trim();
        return JSON.parse(jsonStr);
      } catch (e) {
        console.error("‚ùå L·ªói khi ph√¢n t√≠ch JSON:", e);
        return {
          intention: "t√¨m s·∫£n ph·∫©m",
          keywords: query.split(" "),
          attributes: {}
        };
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ti·ªÅn x·ª≠ l√Ω c√¢u h·ªèi:", error);
      return {
        intention: "t√¨m s·∫£n ph·∫©m",
        keywords: query.split(" "),
        attributes: {}
      };
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ chat th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p cho prompt
   * @param {Array} messages - M·∫£ng tin nh·∫Øn
   * @returns {string} - Chu·ªói l·ªãch s·ª≠ chat
   */
  formatChatHistoryForPrompt(messages) {
    if (!messages || messages.length === 0) return "ƒê√¢y l√† cu·ªôc tr√≤ chuy·ªán ƒë·∫ßu ti√™n.";
    
    return messages.map(message => {
      const type = message._getType ? message._getType() : (message.type || 'unknown');
      if (type === 'human') {
        return `Kh√°ch h√†ng: ${message.content}`;
      } else if (type === 'ai') {
        return `KIA: ${message.content}`;
      } else {
        return `${type}: ${message.content}`;
      }
    }).join('\n\n');
  }

  /**
   * T·∫°o context t·ª´ s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c
   * @param {Array} products - Danh s√°ch s·∫£n ph·∫©m
   * @returns {string} - Chu·ªói context s·∫£n ph·∫©m
   */
  formatProductContext(products) {
    let productContext = "";
    if (products && products.length > 0) {
      productContext = products.map((product, index) => {
        // X√°c ƒë·ªãnh ki·ªÉu d√°ng d·ª±a v√†o t√™n v√† m√¥ t·∫£
        let style = "";
        const title = product.title.toLowerCase();
        const desc = product.description.toLowerCase();
        
        if (title.includes("√°o s∆° mi") || desc.includes("√°o s∆° mi") || desc.includes("formal")) {
          style = "formal";
        } else if (title.includes("√°o thun") || title.includes("t-shirt") || desc.includes("√°o thun") || desc.includes("t-shirt")) {
          style = "casual";
        } else if (title.includes("hoodie") || title.includes("n·ªâ") || desc.includes("hoodie") || desc.includes("n·ªâ")) {
          style = "streetwear";
        } else if (title.includes("blazer") || title.includes("vest") || desc.includes("blazer") || desc.includes("vest")) {
          style = "smart casual";
        } else {
          style = "casual";
        }

        // X√°c ƒë·ªãnh ch·∫•t li·ªáu d·ª±a v√†o m√¥ t·∫£
        let material = "";
        if (desc.includes("cotton")) {
          material = "cotton";
        } else if (desc.includes("linen") || desc.includes("lanh")) {
          material = "linen";
        } else if (desc.includes("len") || desc.includes("wool")) {
          material = "wool";
        } else if (desc.includes("polyester") || desc.includes("poly")) {
          material = "polyester";
        } else if (desc.includes("kaki") || desc.includes("khaki")) {
          material = "khaki";
        } else if (desc.includes("jeans") || desc.includes("denim")) {
          material = "denim";
        } else {
          material = "cotton blend";
        }

        return `
S·∫£n ph·∫©m ${index + 1}:
- T√™n: ${product.title}
- Gi√°: ${product.price.toLocaleString('vi-VN')} VNƒê
- M√†u s·∫Øc: ${product.color || "Kh√¥ng c√≥ th√¥ng tin"}
- K√≠ch th∆∞·ªõc: ${product.size || "Free Size"}
- D√†nh cho: ${product.gender || "Unisex"}
- Th∆∞∆°ng hi·ªáu: ${product.brandName || "Kh√¥ng c√≥ th√¥ng tin"}
- Danh m·ª•c: ${product.categoryName || "Kh√¥ng c√≥ th√¥ng tin"}
- Phong c√°ch: ${style}
- Ch·∫•t li·ªáu: ${material}
- ƒê√°nh gi√°: ${product.totalrating || "Ch∆∞a c√≥ ƒë√°nh gi√°"} sao
- S·ªë l∆∞·ª£ng ƒë√°nh gi√°: ${product.ratings ? product.ratings.length : 0}
- M√¥ t·∫£: ${product.description}
- S·ªë l∆∞·ª£ng c√≤n: ${product.quantity}
`;
      }).join("\n");
    } else {
      productContext = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.";
    }
    
    return productContext;
  }

  /**
   * T·∫°o c√¢u tr·∫£ l·ªùi d·ª±a tr√™n l·ªãch s·ª≠ v√† k·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m s·ª≠ d·ª•ng LangChain
   * @param {string} query - C√¢u h·ªèi c·ªßa kh√°ch h√†ng
   * @param {Array} products - Danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @returns {Promise<string>} - C√¢u tr·∫£ l·ªùi 
   */
  async generateAnswer(query, products, sessionId) {
    try {
      // L·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán
      const chatHistory = await chatMemory.getRecentMessages(sessionId, 10);
      
      // T·∫°o context s·∫£n ph·∫©m
      const productContext = this.formatProductContext(products);
      
      // S·ª≠ d·ª•ng LangChain ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi
      const answer = await this.langChainChain.invoke({
        query: query,
        chat_history: chatHistory,
        product_context: productContext
      });
      
      return answer;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o c√¢u tr·∫£ l·ªùi:", error);
      return "Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.";
    }
  }

  /**
   * X·ª≠ l√Ω tr·ªçn v·∫πn c√¢u h·ªèi c·ªßa kh√°ch h√†ng v·ªõi l·ªãch s·ª≠ tr√≤ chuy·ªán
   * @param {string} query - C√¢u h·ªèi c·ªßa kh√°ch h√†ng 
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm c√¢u tr·∫£ l·ªùi v√† s·∫£n ph·∫©m li√™n quan
   */
  async processQuery(query, sessionId = 'default') {
    try {
      // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o b·ªô nh·ªõ
      await chatMemory.addUserMessage(sessionId, query);
      
      // Ti·ªÅn x·ª≠ l√Ω truy v·∫•n
      const queryInfo = await this.preprocessQuery(query);
      console.log("‚úÖ Th√¥ng tin ph√¢n t√≠ch t·ª´ c√¢u h·ªèi:", queryInfo);
      
      // T√¨m ki·∫øm s·∫£n ph·∫©m
      const products = await this.searchProducts(query);
      
      // T·∫°o c√¢u tr·∫£ l·ªùi v·ªõi l·ªãch s·ª≠
      const answer = await this.generateAnswer(query, products, sessionId);
      
      // Th√™m c√¢u tr·∫£ l·ªùi v√†o b·ªô nh·ªõ
      await chatMemory.addAIMessage(sessionId, answer);
      
      return {
        answer,
        products: products.map(p => ({
          id: p._id,
          title: p.title,
          price: p.price,
          image: p.images && p.images.length > 0 ? p.images[0].url : null,
          slug: p.slug,
          rating: p.totalrating || "0",
          reviewCount: p.ratings ? p.ratings.length : 0
        }))
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:", error);
      return {
        answer: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.",
        products: []
      };
    }
  }

  /**
   * X√≥a cache t√¨m ki·∫øm s·∫£n ph·∫©m
   */
  clearCache() {
    this.productSearchHistory.clear();
    console.log("‚úÖ ƒê√£ x√≥a cache t√¨m ki·∫øm s·∫£n ph·∫©m");
  }
  
  /**
   * X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa m·ªôt phi√™n
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   */
  clearChatHistory(sessionId) {
    chatMemory.clearMemory(sessionId);
  }
}

module.exports = new ChatbotService(); 