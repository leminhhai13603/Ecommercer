const { BufferMemory } = require('langchain/memory');
const { ChatMessageHistory } = require('langchain/stores/message/in_memory');
const { HumanMessage, AIMessage } = require('@langchain/core/messages');

/**
 * L·ªõp qu·∫£n l√Ω b·ªô nh·ªõ cu·ªôc tr√≤ chuy·ªán cho chatbot
 */
class ChatMemoryManager {
  constructor() {
    // L∆∞u tr·ªØ b·ªô nh·ªõ cho t·ª´ng session ng∆∞·ªùi d√πng
    this.userMemories = new Map();
    
    // Th·ªùi gian h·∫øt h·∫°n cho b·ªô nh·ªõ (4 gi·ªù)
    this.expirationTime = 4 * 60 * 60 * 1000;
    
    // Thi·∫øt l·∫≠p x√≥a b·ªô nh·ªõ h·∫øt h·∫°n m·ªói gi·ªù
    setInterval(() => this.cleanupExpiredMemories(), 60 * 60 * 1000);
  }

  /**
   * L·∫•y ho·∫∑c t·∫°o b·ªô nh·ªõ cho m·ªôt session
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @returns {BufferMemory} - B·ªô nh·ªõ c·ªßa phi√™n ng∆∞·ªùi d√πng
   */
  getMemory(sessionId) {
    if (!this.userMemories.has(sessionId)) {
      // T·∫°o b·ªô nh·ªõ m·ªõi n·∫øu ch∆∞a c√≥
      const chatHistory = new ChatMessageHistory();
      
      const memory = new BufferMemory({
        chatHistory,
        returnMessages: true,
        memoryKey: "chat_history",
        inputKey: "query",
        outputKey: "response",
      });
      
      this.userMemories.set(sessionId, {
        memory,
        lastAccessed: Date.now()
      });
    } else {
      // C·∫≠p nh·∫≠t th·ªùi gian truy c·∫≠p
      const memoryData = this.userMemories.get(sessionId);
      memoryData.lastAccessed = Date.now();
      this.userMemories.set(sessionId, memoryData);
    }
    
    return this.userMemories.get(sessionId).memory;
  }

  /**
   * Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o b·ªô nh·ªõ
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @param {string} message - N·ªôi dung tin nh·∫Øn
   */
  async addUserMessage(sessionId, message) {
    const memoryObj = this.getMemory(sessionId);
    const history = memoryObj.chatHistory;
    await history.addMessage(new HumanMessage(message));
  }

  /**
   * Th√™m ph·∫£n h·ªìi c·ªßa AI v√†o b·ªô nh·ªõ
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @param {string} message - N·ªôi dung ph·∫£n h·ªìi
   */
  async addAIMessage(sessionId, message) {
    const memoryObj = this.getMemory(sessionId);
    const history = memoryObj.chatHistory;
    await history.addMessage(new AIMessage(message));
  }

  /**
   * L·∫•y to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @returns {Promise<Array>} - M·∫£ng c√°c tin nh·∫Øn
   */
  async getChatHistory(sessionId) {
    const memoryObj = this.getMemory(sessionId);
    const variables = await memoryObj.loadMemoryVariables({});
    return variables.chat_history || [];
  }

  /**
   * L·∫•y n tin nh·∫Øn g·∫ßn nh·∫•t
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   * @param {number} count - S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn l·∫•y
   * @returns {Promise<Array>} - M·∫£ng c√°c tin nh·∫Øn g·∫ßn nh·∫•t
   */
  async getRecentMessages(sessionId, count = 5) {
    const allMessages = await this.getChatHistory(sessionId);
    return allMessages.slice(-count);
  }

  /**
   * X√≥a b·ªô nh·ªõ c·ªßa m·ªôt phi√™n
   * @param {string} sessionId - ID phi√™n ng∆∞·ªùi d√πng
   */
  clearMemory(sessionId) {
    if (this.userMemories.has(sessionId)) {
      this.userMemories.delete(sessionId);
      console.log(`‚úÖ ƒê√£ x√≥a b·ªô nh·ªõ chat cho phi√™n ${sessionId}`);
    }
  }

  /**
   * X√≥a c√°c b·ªô nh·ªõ ƒë√£ h·∫øt h·∫°n
   */
  cleanupExpiredMemories() {
    const now = Date.now();
    let expiredCount = 0;
    
    for (const [sessionId, memoryData] of this.userMemories.entries()) {
      if (now - memoryData.lastAccessed > this.expirationTime) {
        this.userMemories.delete(sessionId);
        expiredCount++;
      }
    }
    
    if (expiredCount > 0) {
      console.log(`üßπ ƒê√£ x√≥a ${expiredCount} b·ªô nh·ªõ chat h·∫øt h·∫°n`);
    }
  }
}

module.exports = new ChatMemoryManager(); 