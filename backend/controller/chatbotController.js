const chatbotService = require('../services/chatbotService');
const asyncHandler = require('express-async-handler');
const chatMemory = require('../services/chatMemoryManager');

/**
 * X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
 * @route POST /api/chatbot/query
 * @access Public
 */
const handleQuery = asyncHandler(async (req, res) => {
  const { query, sessionId = 'default' } = req.body;
  
  if (!query || query.trim() === '') {
    return res.status(400).json({
      success: false,
      message: 'Vui l√≤ng nh·∫≠p c√¢u h·ªèi'
    });
  }

  try {
    console.log(`ü§ñ Nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng: "${query}" (Session: ${sessionId})`);
    
    // X·ª≠ l√Ω c√¢u h·ªèi v·ªõi ID phi√™n
    const result = await chatbotService.processQuery(query, sessionId);
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.json({
      success: true,
      answer: result.answer,
      products: result.products
    });
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω c√¢u h·ªèi chatbot:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi',
      error: error.message
    });
  }
});

/**
 * L·∫•y th√¥ng tin s·∫£n ph·∫©m g·ª£i √Ω
 * @route GET /api/chatbot/suggest
 * @access Public
 */
const getSuggestions = asyncHandler(async (req, res) => {
  try {
    // ƒê√¢y l√† m·ªôt s·ªë g·ª£i √Ω m·∫´u ƒë·ªÉ ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu
    const suggestions = [
      "T√¥i ƒëang t√¨m √°o ph√¥ng nam",
      "C√≥ √°o m√†u ƒëen n√†o kh√¥ng?",
      "√Åo s∆° mi c√¥ng s·ªü",
      "L√†m th·∫ø n√†o ƒë·ªÉ ph·ªëi ƒë·ªì m√πa h√®?"
    ];
    
    res.json({
      success: true,
      suggestions
    });
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y g·ª£i √Ω:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y g·ª£i √Ω',
      error: error.message
    });
  }
});

/**
 * X√≥a cache t√¨m ki·∫øm
 * @route DELETE /api/chatbot/cache
 * @access Private (Ch·ªâ admin)
 */
const clearCache = asyncHandler(async (req, res) => {
  try {
    chatbotService.clearCache();
    res.json({
      success: true,
      message: 'ƒê√£ x√≥a cache t√¨m ki·∫øm s·∫£n ph·∫©m'
    });
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a cache:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a cache',
      error: error.message
    });
  }
});

/**
 * X√≥a l·ªãch s·ª≠ chat c·ªßa m·ªôt phi√™n
 * @route DELETE /api/chatbot/history/:sessionId
 * @access Private (C·∫ßn x√°c th·ª±c)
 */
const clearChatHistory = asyncHandler(async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p sessionId'
      });
    }
    
    chatbotService.clearChatHistory(sessionId);
    
    res.json({
      success: true,
      message: `ƒê√£ x√≥a l·ªãch s·ª≠ chat cho phi√™n ${sessionId}`
    });
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a l·ªãch s·ª≠ chat:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch s·ª≠ chat',
      error: error.message
    });
  }
});

/**
 * L·∫•y l·ªãch s·ª≠ chat c·ªßa m·ªôt phi√™n
 * @route GET /api/chatbot/history/:sessionId
 * @access Private (C·∫ßn x√°c th·ª±c)
 */
const getChatHistory = asyncHandler(async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p sessionId'
      });
    }
    
    const history = await chatMemory.getChatHistory(sessionId);
    
    res.json({
      success: true,
      history: history.map(msg => ({
        role: msg._getType() === 'human' ? 'user' : 'bot',
        content: msg.content,
        timestamp: msg.additional_kwargs?.timestamp || new Date().toISOString()
      }))
    });
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠ chat:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y l·ªãch s·ª≠ chat',
      error: error.message
    });
  }
});

module.exports = {
  handleQuery,
  getSuggestions,
  clearCache,
  clearChatHistory,
  getChatHistory
}; 